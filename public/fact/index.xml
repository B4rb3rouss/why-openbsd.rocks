<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Facts on Why OpenBSD rocks</title>
    <link>https://why-openbsd.rocks/fact/</link>
    <description>Recent content in Facts on Why OpenBSD rocks</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://why-openbsd.rocks/fact/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ASLR</title>
      <link>https://why-openbsd.rocks/fact/aslr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://why-openbsd.rocks/fact/aslr/</guid>
      <description>Address Space Layout Randomisation places code, data and stack in randomly selected location. This results in every execution of a binary results in a different layout.
This makes it hard for an attacker to predict memory addresses and process behaviour.
Details:
 OpenBSD 3.4 Changelog Address space layout randomization - Wikipedia  </description>
    </item>
    
    <item>
      <title>KARL</title>
      <link>https://why-openbsd.rocks/fact/karl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://why-openbsd.rocks/fact/karl/</guid>
      <description>At every install, upgrade, and boot a new kernel will be generated that has randomized addresses. A unique and unpredictable kernel is ja huge security improvement. This is technique is called Kernel Address Randomized Link (KARL).
Details:
 ‘kernel relinking’ - MARC OpenBSD 6.2  </description>
    </item>
    
    <item>
      <title>freezero(3)</title>
      <link>https://why-openbsd.rocks/fact/freezero/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://why-openbsd.rocks/fact/freezero/</guid>
      <description>The kernel function freezero(3) allows programs to free memory holding sensitive data and overwriting it with zeros.
Details:
 OpenBSD 6.2 freezero(3) manpage  </description>
    </item>
    
    <item>
      <title>ping(8) randomness</title>
      <link>https://why-openbsd.rocks/fact/ping/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://why-openbsd.rocks/fact/ping/</guid>
      <description>In ping(8) and ping6(8), obfuscate the monotonic clock values put on the wire by offsetting them with a random value.
By default fill the ping payload with a ChaCha stream instead of an unvarying payload.
This helps the user hiding the system time from the attacker and prevents from OS detection.
More Details:
 OpenBSD 5.8 Changelog obfuscate the monotonic clock values we put on the wire by offsetting · openbsd/src@08eef1f · GitHub  </description>
    </item>
    
    <item>
      <title>syspatch(8)</title>
      <link>https://why-openbsd.rocks/fact/syspatch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://why-openbsd.rocks/fact/syspatch/</guid>
      <description>A common mistake is that you need to patch and recompile OpenBSD manually when security updates need to happen. OpenBSD supports binary patches since 6.1 using its own tooling syspatch(8)!
Details:
 OpenBSD 6.1 syspatch(8) - OpenBSD manual pages  </description>
    </item>
    
  </channel>
</rss>